<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:controls="clr-namespace:System.Windows.Controls;assembly=DotNetProjects.Input.Toolkit">

    <Style x:Key="MouseOverEffect" TargetType="Grid">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#dbdbdb"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="controls:AutoCompleteBox">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="TextBoxStyle">
            <Setter.Value>
                <Style TargetType="TextBox">
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:AutoCompleteBox">
                    <Grid>
                        <TextBox x:Name="Text" materialDesign:TextFieldAssist.HasClearButton="True"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        FontFamily="{TemplateBinding FontFamily}"
                        FontSize="{TemplateBinding FontSize}"
                        FontStyle="{TemplateBinding FontStyle}"
                        FontWeight="{TemplateBinding FontWeight}"
                        Foreground="{TemplateBinding Foreground}"
                        InputScope="{TemplateBinding InputScope}"
                        Opacity="{TemplateBinding Opacity}"
                        Padding="10 0 0 0"
                        Style="{TemplateBinding TextBoxStyle}"/>
                        <TextBlock IsHitTestVisible="False" FontSize="13" Text="SEARCH A TASK" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="2,3,0,0" Foreground="#666666">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text, ElementName=Text}" Value="">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <Popup AllowsTransparency="True" x:Name="Popup">
                            <Border Background="#eff2f8" CornerRadius="0 0 10 10">
                                <ListBox ScrollViewer.VerticalScrollBarVisibility="Hidden" x:Name="Selector" IsTabStop="False" Padding="0,8"/>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- List View Item Style -->
    <Style x:Key="MyListItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Height" Value="40"/>
        <Setter Property="Width" Value="130"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0 -2 0 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="3" CornerRadius="7">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#fff"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#fff"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Search Button Style-->
    <Style x:Key="SearchButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#a6b1ff"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="18" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Path Name="ico" Data="{DynamicResource Search}" Fill="White" Width="15" Stretch="Uniform"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#6D78CB"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ico" Property="Fill" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PriorityStartStyle" TargetType="{x:Type Path}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Opacity" Value="0.8"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="Separator" x:Key="SeparatorStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle Height="{TemplateBinding Height}"  
                           Fill="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ContextMenu x:Key="TextBoxContextMenu" Background="White">
        <MenuItem Command="ApplicationCommands.Copy" />
        <MenuItem Command="ApplicationCommands.Cut" />
        <MenuItem Command="ApplicationCommands.Paste" />
    </ContextMenu>
    
    
    <!-- Start: Button Close | Restore | Minimize -->
    <Style x:Key="IconButtonsStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="25"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="bd" CornerRadius="5" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Path Name="ico" Data="{TemplateBinding Content}" Fill="#FFFFFF" Height="10" Width="10" Stretch="Uniform"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#626871"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Tag" Value="IsCloseButton"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#F72626"/>
                            <Setter TargetName="ico" Property="Fill" Value="#fff"/>
                        </MultiTrigger>
                        <Trigger Property="Tag" Value="Home">
                            <Setter TargetName="ico" Property="Height" Value="20"/>
                            <Setter TargetName="ico" Property="Width" Value="20"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="word">
                            <Setter TargetName="ico" Property="Height" Value="20"/>
                            <Setter TargetName="ico" Property="Width" Value="20"/>
                            <Setter TargetName="ico" Property="Fill" Value="#0e213d"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="print">
                            <Setter TargetName="ico" Property="Height" Value="20"/>
                            <Setter TargetName="ico" Property="Width" Value="20"/>
                            <Setter TargetName="ico" Property="Fill" Value="#0e213d"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="pdf">
                            <Setter TargetName="ico" Property="Height" Value="20"/>
                            <Setter TargetName="ico" Property="Width" Value="20"/>
                            <Setter TargetName="ico" Property="Fill" Value="#0e213d"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="plus">
                            <Setter TargetName="ico" Property="Height" Value="15"/>
                            <Setter TargetName="ico" Property="Width" Value="15"/>
                            <Setter TargetName="bd" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="ico" Property="Fill" Value="#626871"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ico" Property="Fill" Value="Black"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Tag" Value="plus"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ico" Property="Fill" Value="#35393d"/>
                            <Setter Property="Background" Value="#dbdbdb"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Tag" Value="word"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ico" Property="Fill" Value="#195bbe"/>
                            <Setter Property="Background" Value="#dadada"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Tag" Value="print"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ico" Property="Fill" Value="#35393d"/>
                            <Setter Property="Background" Value="#fff"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Tag" Value="pdf"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ico" Property="Fill" Value="#b12e24"/>
                            <Setter Property="Background" Value="#dadada"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End: Button Close | Restore | Minimize -->
    <!-- Start: iToggleButton Style -->
    <Style x:Key="iToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="IsChecked" Value="False"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="5" SnapsToDevicePixels="True">
                        <Path Name="ico" Data="{TemplateBinding Content}" Fill="#FFFFFF" Height="20" Width="20" Stretch="Uniform"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#626871"/>
                            <Setter Property="BorderBrush"
                                        TargetName="border"
                                        Value="#FFFFFF"/>
                        </Trigger>
                        <!--<Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background"
                                        TargetName="border"
                                        Value="Transparent"/>
                            <Setter Property="BorderBrush"
                                        TargetName="border"
                                       Value="#FFFFFF"/>
                        </Trigger>-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ico" Property="Fill" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End: iToggleButton Style -->

    <!-- Start: Profile User Style -->
    <Style x:Key="TitleText" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="#C2C3C3"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="FontFamily" Value="Lucida Sans Unicode"/>
    </Style>

    <Style x:Key="MainText" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
        <!--<Setter Property="Margin" Value="11,0"/>-->
    </Style>
    <!-- End: Profile User Style -->

    <!-- Start: Pop-up Button Style -->
    <Style x:Key="PopupButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                              Focusable="False"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End: Pop-up Button Style -->

    <!--CheckBox Style-->
    <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxStyle">
        <Setter Property="Background" Value="#F4F4F4"/>
        <Setter Property="BorderBrush" Value="#8E8F8F"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.1" ScaleY="1.1" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="tick" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="tick" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Ellipse x:Name="border" Stroke="{TemplateBinding Background}" StrokeThickness="2" Fill="White" Width="16" Height="16"/>
                        <Path x:Name="tick" Fill="{TemplateBinding Background}" Data="{DynamicResource tick}" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="border"  Value="#3e474d"/>
                            <Setter Property="StrokeThickness" TargetName="border"  Value="2"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="border"  Value="#3e474d"/>
                            <Setter Property="StrokeThickness" TargetName="border"  Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CheckBoxSort Style-->
    <Style x:Key="CheckBoxSortStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}" 
                                    HorizontalAlignment="Center" 
                                    Margin="1" VerticalAlignment="Center">
                            <Grid x:Name="markGrid" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Path x:Name="starOutline" Fill="#687681" Data="{DynamicResource sort-calendar-descending}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1" Opacity="0" Stretch="Uniform"/>
                                <Path x:Name="star" Fill="#687681" Data="{DynamicResource sort-calendar-ascending}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1" Opacity="0" Stretch="Uniform"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="starOutline" Value="#3e474d"/>
                            <Setter Property="Fill" TargetName="star" Value="#3e474d"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="star" Value="1"/>
                            <Setter Property="Opacity" TargetName="starOutline" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Opacity" TargetName="star" Value="0"/>
                            <Setter Property="Opacity" TargetName="starOutline" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CheckBoxEye Style-->
    <Style x:Key="CheckBoxEyeStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}" 
                                    HorizontalAlignment="Center" 
                                    Margin="1" VerticalAlignment="Center">
                            <!-- Change Path here-->
                            <Grid x:Name="markGrid" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <materialDesign:PackIcon Name="eye" Kind="Eye" Width="20" Height="20" VerticalAlignment="Center" Foreground="#3c3c3c" Margin="1" Opacity="0"/>
                                <materialDesign:PackIcon Name="eyeOff" Kind="EyeOff" Width="20" Height="20" VerticalAlignment="Center" Foreground="#3c3c3c" Margin="1" Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" TargetName="eye" Value="#3e474d"/>
                            <Setter Property="Foreground" TargetName="eyeOff" Value="#3e474d"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="eyeOff" Value="1"/>
                            <Setter Property="Opacity" TargetName="eye" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Opacity" TargetName="eye" Value="1"/>
                            <Setter Property="Opacity" TargetName="eyeOff" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

   
    
    <!--<Style x:Key="MenuPopUpButtonsStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <StackPanel Orientation="Horizontal">
                            <Image  Source="/Assets/Images/calendar.png" Height="20" Width="20" Stretch="Uniform"/>
                            <TextBlock Text="{TemplateBinding Content}" FontSize="14" Margin="25 0 0 0"/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#dfdfdf"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->
    
    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxWaterMark">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="Andalus"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <ScrollViewer x:Name="PART_ContentHost" Margin="5,0,0,0" VerticalAlignment="Center" />
                        <Label Margin="5,0,0,0" x:Name="WaterMarkLabel" Content="{TemplateBinding Tag}" VerticalAlignment="Top"
                               Visibility="Collapsed" Foreground="#5e5e5e" FontFamily="Arial"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--TextBox Item Style-->
    <Style x:Key="CategoryTitleTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBoxBase}">
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconButtonStyle" BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="#3e474d" />
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="delete"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#e63e31"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="delete"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="Red"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="restore"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#266739"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="restore"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#184124"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="info"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#0e213d"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="status"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#fcc422"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>